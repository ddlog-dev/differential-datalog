Adding namespace and pods
Adding policies
LOG (0): createAppliedToGroup ns1.policy1
LOG (0): createAppliedToGroup ns1.policy1
AppliedToGroup:
AppliedToGroup{.descr = AppliedToGroupDescr{.uid = k8spolicy.UID{.uid = "dbd5cd23-1488-56b6-925e-7354a2189c7d"}, .name = "dbd5cd23-1488-56b6-925e-7354a2189c7d", .selector = types.GroupSelector{.normalizedName = "namespace=ns1 And podSelector=l1 In [l1v1]", .nsSelector = types.NSSelectorNS{.ns = "ns1"}, .podSelector = std.Some{.x = k8spolicy.LabelSelector{.matchLabels = [("l1", "l1v1")], .matchExpressions = []}}}}, .podsByNode = [], .span = []}: +1
NetworkPolicy:
NetworkPolicy{.descr = NetworkPolicyDescr{.uid = k8spolicy.UID{.uid = "156bc79a-ee16-47d9-82b6-8bc48849af74"}, .name = "ns1.policy1", .namespace = "ns1", .rules = [], .appliedToGroups = ["dbd5cd23-1488-56b6-925e-7354a2189c7d"]}, .span = []}: +1
Making changes
LOG (0): createAppliedToGroup ns1.policy1
LOG (0): createAppliedToGroup ns1.policy1
LOG (0): createAppliedToGroup ns1.policy1
LOG (0): createAppliedToGroup ns1.policy1
AddressGroup:
AddressGroup{.descr = AddressGroupDescr{.uid = k8spolicy.UID{.uid = "df49fa6b-0346-5dc9-9bb2-3da4fdbe8dd8"}, .name = "df49fa6b-0346-5dc9-9bb2-3da4fdbe8dd8", .selector = types.GroupSelector{.normalizedName = "namespaceSelector= And podSelector=l1 In [l1v1]", .nsSelector = types.NSSelectorLS{.selector = k8spolicy.LabelSelector{.matchLabels = [], .matchExpressions = []}}, .podSelector = std.Some{.x = k8spolicy.LabelSelector{.matchLabels = [("l1", "l1v1")], .matchExpressions = []}}}}, .addresses = [], .span = []}: +1
NetworkPolicy:
NetworkPolicy{.descr = NetworkPolicyDescr{.uid = k8spolicy.UID{.uid = "156bc79a-ee16-47d9-82b6-8bc48849af74"}, .name = "ns1.policy1", .namespace = "ns1", .rules = [], .appliedToGroups = ["dbd5cd23-1488-56b6-925e-7354a2189c7d"]}, .span = []}: -1
NetworkPolicy{.descr = NetworkPolicyDescr{.uid = k8spolicy.UID{.uid = "156bc79a-ee16-47d9-82b6-8bc48849af74"}, .name = "ns1.policy1", .namespace = "ns1", .rules = [types.NetworkPolicyRule{.direction = types.DirectionIn{}, .from = types.NetworkPolicyPeer{.addressGroups = ["df49fa6b-0346-5dc9-9bb2-3da4fdbe8dd8"], .ipBlocks = []}, .to = types.NetworkPolicyPeer{.addressGroups = [], .ipBlocks = []}, .services = [types.Service{.protocol = "TCP", .port = std.None{}}]}], .appliedToGroups = ["dbd5cd23-1488-56b6-925e-7354a2189c7d"]}, .span = []}: +1
