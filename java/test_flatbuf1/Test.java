/*
 * FlatBuffers-based serialization API test.
 *
 * Perform the same set of updates twice, once using the DDlogRecord-based
 * commit method, and once using FlatBuffers-based commit.  Write updates to
 * two different files that can be diffed by the test script.
 */

import java.io.IOException;
import java.util.*;
import java.lang.RuntimeException;
import java.math.BigInteger;
import java.util.Arrays;
import java.io.PrintStream;
import java.io.UncheckedIOException;

/* Generic DDlog API shared by all programs. */
import ddlogapi.DDlogAPI;
import ddlogapi.DDlogCommand;
import ddlogapi.DDlogException;

/* Additional program-specific bindings generated by `ddlog`. */
import ddlog.flatbufTest.*;

public class Test {
    private final DDlogAPI api;
    private final PrintStream fb_file;
    private final PrintStream query_file;
    private final PrintStream rec_file;

    Test() throws IOException, DDlogException {
        /* Create an instance of the DDlog program with one worker thread. */
        this.api = new DDlogAPI(1, null, false);
        api.recordCommands("replay.dat", false);

        this.fb_file  = new PrintStream("fb.dump");
        this.query_file  = new PrintStream("query.dump");
        this.rec_file = new PrintStream("rec.dump");
    }

    // typedef tuple = (bool, bit<8>, string)
    private String printTuple(Tuple3__bool__bit_8___stringReader t) {
        return "(" + t.a0() + ", " + t.a1() + ", \"" + t.a2() + "\")";
    }

    // typedef mtuple = (bit<32>, string)
    private String printMTuple(Tuple2__bit_32___stringReader t) {
        return "(" + t.a0() + ", \"" + t.a1() + "\")";
    }

    private String printNI(NIReader v) {
        List<Tuple3__bool__bit_8___stringReader> vs = v.v();
        ArrayList<String> strings = new ArrayList<String>(vs.size());
        vs.forEach((t) -> strings.add(printTuple(t)));
        return "NI{[" + String.join(", ",strings) + "]}";
    }

    private String printQI(QIReader v) {
        Map<Long,String> vs = v.m();
        ArrayList<String> vs_strs = new ArrayList<String>(vs.size());
        for (Map.Entry<Long,String> entry : vs.entrySet()) {
            vs_strs.add(entry.getKey() + "=>\"" + entry.getValue() + "\"");
        }
        return "QI{{" + String.join(", ", vs_strs) + "}}";
    }
    
    private String printTI(TIReader v) {
        std_Option__bit_32_Reader m = (std_Option__bit_32_Reader)(v).m();
        if (m instanceof std_Option__bit_32_Reader.std_Some) {
            return "TI{std_Some{" + ((std_Option__bit_32_Reader.std_Some)m).x() + "}}";
        } else {
            return "TI{std_None{}}";
        }
    }

    private String printWI(WIReader v) {
        std_Option__ManyReader m = (std_Option__ManyReader)(v).m();
        if (m instanceof std_Option__ManyReader.std_Some) {
            return "WI{std_Some{" + printMany(((std_Option__ManyReader.std_Some)m).x()) + "}}";
        } else {
            return "WI{std_None{}}";
        }
    }

    private String printXI(XIReader v) {
        List<ManyReader> m = v.m();
        ArrayList<String> strings = new ArrayList<String>(m.size());
        m.forEach((x) -> strings.add(printMany(x)));
        return "XI{[" + String.join(", ",strings) + "]}";
    }

    private String printYI(YIReader v) {
        List<std_Option___bool__bit_8___string_Reader> val = v.v();
        ArrayList<String> strings = new ArrayList<String>(val.size());
        val.forEach((x) -> {
            if (x instanceof std_Option___bool__bit_8___string_Reader.std_Some) {
                strings.add("std_Some{" + printTuple(((std_Option___bool__bit_8___string_Reader.std_Some)x).x()) + "}");
            } else {
                strings.add("std_None{}");
            }
        });
        return "YI{[" + String.join(", ", strings) + "]}";
    }

    private String printStrings(List<String> v) {
        List<String> quoted = new ArrayList<String>();
        v.forEach((x) -> quoted.add("\"" + x + "\""));
        return quoted.toString();
    }

    private String printOptString(Object v) {
        if (v instanceof std_Option__stringReader.std_Some) {
            return "std_Some{\"" + ((std_Option__stringReader.std_Some)v).x() + "\"}";
        } else {
            return "std_None{}";
        }
    }

    private String printZI5(Map<String, ManyReader> v) {
        ArrayList<String> strings = new ArrayList<String>(v.size());
        for (Map.Entry<String, ManyReader> e: v.entrySet()) {
            strings.add("\"" + e.getKey() + "\"=>" + printMany(e.getValue()));
        }
        return "{" + String.join(", ", strings) + "}";
    }

    private String printZI11(Map<ManyReader, String> v) {
        ArrayList<String> strings = new ArrayList<String>(v.size());
        for (Map.Entry<ManyReader, String> e: v.entrySet()) {
            strings.add(printMany(e.getKey()) + "=>\"" + e.getValue() + "\"");
        }
        return "{" + String.join(", ", strings) + "}";
    }

    private String printZI12(Tuple4__string__bigint__std_Vec_bigint____bit_16___Many_Reader v) {
        return "(\"" + v.a0() + "\", " + v.a1() +
                ", " + v.a2() + ", ("  + v.a3().a0() + ", " + printMany(v.a3().a1()) + "))";
    }

    private String printZI13(Generic___bool__bit_8___string___ManyReader v) {
        return "Generic{\"" + v.f0() +
            "\"," + printTuple(v.f1()) + "," + printMany(v.f2()) + "}";
    }

    // typedef Many = A{x: string}
    //              | B{b: bool}
    //              | D{t: tuple}
    private String printMany(ManyReader m) {
        if (m instanceof ManyReader.A) {
            return "A{\"" + ((ManyReader.A)m).x() + "\"}";
        } else if (m instanceof ManyReader.B) {
            return "B{" + ((ManyReader.B)m).b() + "}";
        } else if (m instanceof ManyReader.D) {
            return "D{" + printTuple(((ManyReader.D)m).t()) + "}";
        } else {
            throw new IllegalArgumentException("Invalid Many value " + m.toString());
        }
    }

    private String printCases(String relname, Cases__string__signed_32_Reader r) {
        if (r instanceof Cases__string__signed_32_Reader.First) {
            return relname + "{First{\"" + ((Cases__string__signed_32_Reader.First)r).a() + "\"}}";
        } else if (r instanceof Cases__string__signed_32_Reader.Second) {
            return relname + "{Second{" + ((Cases__string__signed_32_Reader.Second)r).b() + "}}";
        } else {
            throw new IllegalArgumentException("Invalid Cases value " + r.toString());
        }
    }

    private String printOr(String relname, Or__string__signed_32_Reader r) {
        if (r instanceof Or__string__signed_32_Reader.OrFirst) {
            return relname + "{OrFirst{F{\"" + ((Or__string__signed_32_Reader.OrFirst)r).f().a() + "\"}}}";
        } else if (r instanceof Or__string__signed_32_Reader.OrSecond) {
            return relname + "{OrSecond{S{" + ((Or__string__signed_32_Reader.OrSecond)r).s().a() + "}}}";
        } else {
            throw new IllegalArgumentException("Invalid Cases value " + r.toString());
        }
    }

    void onRecCommit(DDlogCommand command) throws IOException {
        rec_file.println(command.toString());
    }

    @SuppressWarnings("unchecked")
    void onFBCommit(DDlogCommand<Object> command) throws IOException {
        int relid = command.relid();
        switch (relid) {
            // output relation OBI(b: bool)
            case flatbufTestRelation.OBI: {
                BIReader v = (BIReader)command.value();
                fb_file.println("From " + relid + " " + command.kind() + " BI{" + v.b() + "}");
                break;
            }

            // output relation OCI(c: bit<32>)
            case flatbufTestRelation.OCI: {
                CIReader v = (CIReader)command.value();
                fb_file.println("From " + relid + " " + command.kind() + " CI{" + v.c() + "}");
                break;
            }

            // output relation ODI(d: signed<16>)
            case flatbufTestRelation.ODI: {
                DIReader v = (DIReader)command.value();
                fb_file.println("From " + relid + " " + command.kind() + " DI{" + v.d() + "}");
                break;
            }

            // output relation OEI(e: bigint)
            case flatbufTestRelation.OEI: {
                EIReader v = (EIReader)command.value();
                fb_file.println("From " + relid + " " + command.kind() + " EI{" + v.e() + "}");
                break;
            }

            // output relation OFI(s: string)
            case flatbufTestRelation.OFI: {
                FIReader v = (FIReader)command.value();
                fb_file.println("From " + relid + " " + command.kind() + " FI{\"" + v.s() + "\"}");
                break;
            }

            // output relation OGI(d: bit<64>)
            case flatbufTestRelation.OGI: {
                GIReader v = (GIReader)command.value();
                fb_file.println("From " + relid + " " + command.kind() + " GI{" + v.d() + "}");
                break;
            }

            // output relation OHI(d: bit<128>)
            case flatbufTestRelation.OHI: {
                HIReader v = (HIReader)command.value();
                fb_file.println("From " + relid + " " + command.kind() + " HI{" + v.d() + "}");
                break;
            }

            // output relation OII(d: bit<12>)
            case flatbufTestRelation.OII: {
                IIReader v = (IIReader)command.value();
                fb_file.println("From " + relid + " " + command.kind() + " II{" + v.d() + "}");
                break;
            }

            // output relation OJI(a: (bool, bit<8>, string))
            case flatbufTestRelation.OJI: {
                JIReader v = (JIReader)command.value();
                Tuple3__bool__bit_8___stringReader a = v.a();
                fb_file.println("From " + relid + " " + command.kind() + " JI{" + printTuple(a) + "}");
                break;
            }

            // output relation OKI(t: tuple)
            case flatbufTestRelation.OKI: {
                KIReader v = (KIReader)command.value();
                Tuple3__bool__bit_8___stringReader t = v.t();
                fb_file.println("From " + relid + " " + command.kind() + " KI{" + printTuple(t) + "}");
                break;
            }

            // output relation OLI[tuple]
            case flatbufTestRelation.OLI: {
                Tuple3__bool__bit_8___stringReader v = (Tuple3__bool__bit_8___stringReader)command.value();
                fb_file.println("From " + relid + " " + command.kind() + " " + printTuple(v));
                break;
            }

            // output relation OL0I(a: bool, b: bit<8>, s: string)
            case flatbufTestRelation.OL0I: {
                L0IReader v = (L0IReader)command.value();
                fb_file.println("From " + relid + " " + command.kind() + " L0I{" + v.a() + "," + v.b() + ",\"" + v.s() + "\"}");
                break;
            }

            // output relation OMI(v: Vec<bool>)
            case flatbufTestRelation.OMI: {
                MIReader v = (MIReader)command.value();
                fb_file.println("From " + relid + " " + command.kind() + " MI{" + v.v() + "}");
                break;
            }

            // output relation ONI(v: Vec<tuple>)
            case flatbufTestRelation.ONI: {
                NIReader v = (NIReader)command.value();
                List<Tuple3__bool__bit_8___stringReader> vs = v.v();
                ArrayList<String> strings = new ArrayList<String>(vs.size());
                vs.forEach((t) -> strings.add(printTuple(t)));
                fb_file.println("From " + relid + " " + command.kind() + " " + printNI((NIReader)command.value()));
                break;
            }

            // output relation OOI(v: Vec<Vec<bool>>)
            case flatbufTestRelation.OOI: {
                OIReader v = (OIReader)command.value();
                List<List<Boolean>> vs = v.v();
                fb_file.println("From " + relid + " " + command.kind() + " OI{" + vs + "}");
                break;
            }

            // output relation OPI1(s: Set<bit<8>>)
            case flatbufTestRelation.OPI1: {
                PI1Reader v = (PI1Reader)command.value();
                List<Integer> vs = v.s();
                fb_file.println("From " + relid + " " + command.kind() + " PI1{" + vs + "}");
                break;
            }

            // output relation OPI2(s: Set<bit<16>>)
            case flatbufTestRelation.OPI2: {
                PI2Reader v = (PI2Reader)command.value();
                List<Integer> vs = v.s();
                fb_file.println("From " + relid + " " + command.kind() + " PI2{" + vs + "}");
                break;
            }

            // output relation OPI3(s: Set<bit<32>>)
            case flatbufTestRelation.OPI3: {
                PI3Reader v = (PI3Reader)command.value();
                List<Long> vs = v.s();
                fb_file.println("From " + relid + " " + command.kind() + " PI3{" + vs + "}");
                break;
            }

            // output relation OPI4(s: Set<bit<64>>)
            case flatbufTestRelation.OPI4: {
                PI4Reader v = (PI4Reader)command.value();
                List<Long> vs = v.s();
                fb_file.println("From " + relid + " " + command.kind() + " PI4{" + vs + "}");
                break;
            }

            // output relation OPI5(s: Set<bit<128>>)
            case flatbufTestRelation.OPI5: {
                PI5Reader v = (PI5Reader)command.value();
                List<BigInteger> vs = v.s();
                fb_file.println("From " + relid + " " + command.kind() + " PI5{" + vs + "}");
                break;
            }

            // output relation OQI(m: Map<bit<32>, string>)
            case flatbufTestRelation.OQI: {
                QIReader v = (QIReader)command.value();
                fb_file.println("From " + relid + " " + command.kind() + " " + printQI(v));
                break;
            }

            // output relation ORI(m: Ref<bit<32>>)
            case flatbufTestRelation.ORI: {
                RIReader v = (RIReader)command.value();
                fb_file.println("From " + relid + " " + command.kind() + " RI{" + v.m() + "}");
                break;
            }

            // output relation OSI(m: C)
            case flatbufTestRelation.OSI: {
                SIReader v = (SIReader)command.value();
                fb_file.println("From " + relid + " " + command.kind() + " SI{C{\"" + v.m().x() + "\"}}");
                break;
            }

            // output relation OTI(m: Option<bit<32>>)
            case flatbufTestRelation.OTI: {
                fb_file.println("From " + relid + " " + command.kind() + " " + printTI((TIReader)command.value()));
                break;
            }

            // output relation OUI[Many]
            case flatbufTestRelation.OUI: {
                ManyReader m = (ManyReader)command.value();
                fb_file.println("From " + relid + " " + command.kind() + " " + printMany(m));
                break;
            }

            //output relation OVI(a: bool, b: Many)
            case flatbufTestRelation.OVI: {
                VIReader v = (VIReader)command.value();
                fb_file.println("From " + relid + " " + command.kind() + " VI{" + v.a() + "," + printMany(v.b()) + "}");
                break;
            }

            // output relation OWI(m: Option<Many>)
            case flatbufTestRelation.OWI: {
                fb_file.println("From " + relid + " " + command.kind() + " " + printWI((WIReader)command.value()));
                break;
            }

            //output relation OXI(m: Vec<Many>)
            case flatbufTestRelation.OXI: {
                fb_file.println("From " + relid + " " + command.kind() + " " + printXI((XIReader)command.value()));
                break;
            }

            //typedef VOT = Vec<Option<tuple>>
            // output relation OYI(v: VOT)
            case flatbufTestRelation.OYI: {
                fb_file.println("From " + relid + " " + command.kind() + " " + printYI((YIReader)command.value()));
                break;
            }
            // output relation OZI0[string]
            case flatbufTestRelation.OZI0: {
                String v = (String)command.value();
                fb_file.println("From " + relid + " " + command.kind() + " \"" + v + "\"");
                break;
            }
            // output relation OZI1[bool]
            case flatbufTestRelation.OZI1: {
                Boolean v = (Boolean)command.value();
                fb_file.println("From " + relid + " " + command.kind() + " " + v);
                break;
            }
            // output relation OZI2[bit<32>]
            case flatbufTestRelation.OZI2: {
                Long v = (Long)command.value();
                fb_file.println("From " + relid + " " + command.kind() + " " + v);
                break;
            }
            // output relation OZI3[Many]
            case flatbufTestRelation.OZI3: {
                ManyReader v = (ManyReader)command.value();
                fb_file.println("From " + relid + " " + command.kind() + " " + printMany(v));
                break;
            }
            // output relation OZI4[Vec<string>]
            case flatbufTestRelation.OZI4: {
                fb_file.println("From " + relid + " " + command.kind() + " " + printStrings((List<String>)command.value()));
                break;
            }
            // output relation OZI5[Map<string, Many>]
            case flatbufTestRelation.OZI5: {
                fb_file.println("From " + relid + " " + command.kind() + " " + printZI5((Map<String, ManyReader>)command.value()));
                break;
            }
            // output relation OZI6[Option<string>]
            case flatbufTestRelation.OZI6: {
                fb_file.println("From " + relid + " " + command.kind() + " " + printOptString(command.value()));
                break;
            }
            // output relation OZI7[Ref<string>]
            case flatbufTestRelation.OZI7: {
                String v = (String)command.value();
                fb_file.println("From " + relid + " " + command.kind() + " \"" + v + "\"");
                break;
            }
            // output relation OZI8[Ref<bit<25>>]
            case flatbufTestRelation.OZI8: {
                Long v = (Long)command.value();
                fb_file.println("From " + relid + " " + command.kind() + " " + v);
                break;
            }
            // output relation OZI9[Ref<Ref<bit<25>>>]
            case flatbufTestRelation.OZI9: {
                Long v = (Long)command.value();
                fb_file.println("From " + relid + " " + command.kind() + " " + v);
                break;
            }
            // output relation OZI10[Ref<IString>]
            case flatbufTestRelation.OZI10: {
                String v = (String)command.value();
                fb_file.println("From " + relid + " " + command.kind() + " \"" + v + "\"");
                break;
            }
            // output relation OZI11[Map<Many, string>]
            case flatbufTestRelation.OZI11: {
                fb_file.println("From " + relid + " " + command.kind() + " " + printZI11((Map<ManyReader,String>)command.value()));
                break;
            }
            // output relation OZI12[(string, bigint, Vec<bigint>, (bit<16>, Many))]
            case flatbufTestRelation.OZI12: {
                fb_file.println("From " + relid + " " + command.kind() + " " +
                        printZI12((Tuple4__string__bigint__std_Vec_bigint____bit_16___Many_Reader)command.value()));
                break;
            }
            // output relation OZI13[Generic<Ref<tuple>, Many>]
            case flatbufTestRelation.OZI13: {
                fb_file.println("From " + relid + " " + command.kind() + " " +
                        printZI13((Generic___bool__bit_8___string___ManyReader)command.value()));
                break;
            }
            // output relation OZI(d: bit<256>)
            case flatbufTestRelation.OZI: {
                ZIReader z = (ZIReader)command.value();
                fb_file.println("From " + relid + " " + command.kind() + " ZI{" + z.d() + "}");
                break;
            }
            case flatbufTestRelation.OZI14: {
                ZI14Reader r = (ZI14Reader)command.value();
                fb_file.println("From " + relid + " " + command.kind() + " " + printCases("ZI14", r.c()));
                break;
            }
            case flatbufTestRelation.OZI15: {
                ZI15Reader r = (ZI15Reader)command.value();
                fb_file.println("From " + relid + " " + command.kind() + " " + printOr("ZI15", r.c()));
                break;
            }
            case flatbufTestRelation.Omodule_ZI16: {
                module_ZI16Reader r = (module_ZI16Reader)command.value();
                fb_file.println("From " + relid + " " + command.kind() + " module_ZI16{\"" + r.x() + "\"}");
                break;
            }
            case flatbufTestRelation.Omodule_ZI17: {
                String r = (String)command.value();
                fb_file.println("From " + relid + " " + command.kind() + " \"" + r + "\"");
                break;
            }
            case flatbufTestRelation.Omodule_ZI18: {
                module_ZI18Reader b = (module_ZI18Reader)command.value();
                fb_file.println("From " + relid + " " + command.kind() + " module_ZI18{" + printMTuple(b.t()) + "}");
                break;
            }
            case flatbufTestRelation.Omodule_ZI19: {
                Tuple2__bit_32___stringReader b = (Tuple2__bit_32___stringReader)command.value();
                fb_file.println("From " + relid + " " + command.kind() + " " + printMTuple(b));
                break;
            }
            case flatbufTestRelation.OZI20: {
                ZI20Reader b = (ZI20Reader)command.value();
                fb_file.println("From " + relid + " " + command.kind() + " ZI20{" + printMTuple(b.t()) + "}");
                break;
            }
            case flatbufTestRelation.OZI21: {
                ZI21Reader m = (ZI21Reader)command.value();
                fb_file.println("From " + relid + " " + command.kind() + " ZI21{" + m.m() + "}");
                break;
            }
            default:
                fb_file.println("Unknown output relation " + relid);
                //throw new IllegalArgumentException("Unknown relation id " + relid);
        }

    }

    void update() throws DDlogException {
        flatbufTestUpdateBuilder builder = new flatbufTestUpdateBuilder();
        builder.insert_BI(true);
        builder.insert_CI((byte)8);
        builder.insert_DI((short)-5);
        builder.insert_DI((short)-1);
        builder.insert_DI((short)-2);
        builder.insert_DI((short)-3);
        builder.insert_DI((short)5);
        builder.insert_DI((short)1000);
        builder.insert_DI((short)Short.MAX_VALUE);
        builder.insert_DI((short)Short.MIN_VALUE);
        builder.insert_EI(BigInteger.ZERO.subtract(BigInteger.ONE));
        builder.insert_FI("string");
        builder.insert_GI((long)100);
        builder.insert_HI(new BigInteger("0ABACABA0ABACABA", 16));
        builder.insert_II((short)7);
        {
            Tuple3__bool__bit_8___stringWriter ji = builder.create_Tuple3__bool__bit_8___string(true, (byte)10, "string");
            builder.insert_JI(ji);
        }
        {
            Tuple3__bool__bit_8___stringWriter ki = builder.create_Tuple3__bool__bit_8___string(false, (byte)9, "text");
            builder.insert_KI(ki);
        }
        builder.insert_LI(true, (byte)-1, "something");
        builder.insert_L0I(false, (byte)-2, "else");
        {
            Boolean[] v = new Boolean[] {true, false, true};
            builder.insert_MI(Arrays.asList(v));
        }
        {
            ArrayList<Tuple3__bool__bit_8___stringWriter> vec = new ArrayList<Tuple3__bool__bit_8___stringWriter>(2);
            vec.add(builder.create_Tuple3__bool__bit_8___string(true, (byte)-1, "check"));
            vec.add(builder.create_Tuple3__bool__bit_8___string(false, (byte)1, "fails"));
            builder.insert_NI(vec);
        }
        {
            List<Boolean> l1 = Arrays.asList(new Boolean[] {false, false});
            List<Boolean> l2 = Arrays.asList(new Boolean[] {true, true});
            List<List<Boolean>> nest = new ArrayList<List<Boolean>>(2);
            nest.add(l1);
            nest.add(l2);
            builder.insert_OI(nest);
        }
        {
            List<Byte> pi = Arrays.asList(new Byte[]{ -2, 3, 2, 3 });
            builder.insert_PI1(pi);
        }
        {
            List<Short> pi = Arrays.asList(new Short[]{ 10000, 3, -2, 3 });
            builder.insert_PI2(pi);
        }
        {
            List<Integer> pi = Arrays.asList(new Integer[]{ 0xffffffff, 3, -2, 3 });
            builder.insert_PI3(pi);
        }
        {
            List<Long> pi = Arrays.asList(new Long[]{ 2L, 3L, 2L, 3L });
            builder.insert_PI4(pi);
        }
        {
            List<BigInteger> pi = Arrays.asList(new BigInteger[]{
                BigInteger.valueOf(0xffffffffffffffL),
                BigInteger.valueOf(3),
                BigInteger.valueOf(2),
                BigInteger.valueOf(3)
            });
            builder.insert_PI5(pi);
        }
        {
            Map<Long, String> map = new HashMap<Long, String>();
            map.put(Long.valueOf(2), "here");
            map.put(Long.valueOf(3), "there");
            builder.insert_QI(map);
        }
        builder.insert_RI(2);
        {
            CWriter c = builder.create_C("s");
            builder.insert_SI(c);
        }
        {
            std_Option__bit_32_Writer b = builder.create_std_Some__bit_32_(10);
            builder.insert_TI(b);
            std_Option__bit_32_Writer b1 = builder.create_std_None__bit_32_();
            builder.insert_TI(b1);
        }
        builder.insert_UI_A("a");
        builder.insert_UI_B(false);
        builder.insert_UI_D(builder.create_Tuple3__bool__bit_8___string(false, (byte)2, "zz"));
        {
            ManyWriter a = builder.create_A("aa");
            ManyWriter b = builder.create_B(false);
            ManyWriter d = builder.create_D(builder.create_Tuple3__bool__bit_8___string(false, (byte)2, "string"));
            builder.insert_VI(false, a);
            builder.insert_VI(true, b);
            builder.insert_VI(false, d);
        }
        {
            std_Option__ManyWriter om0 = builder.create_std_None__Many();
            builder.insert_WI(om0);
            std_Option__ManyWriter om1 = builder.create_std_Some__Many(builder.create_B(true));
            builder.insert_WI(om1);
        }
        {
            ManyWriter[] m = {
                builder.create_A("aa"),
                builder.create_B(false),
                builder.create_D(builder.create_Tuple3__bool__bit_8___string(false, (byte)2, "string"))
            };
            builder.insert_XI(Arrays.asList(m));
        }
        {
            std_Option___bool__bit_8___string_Writer[] v = {
                builder.create_std_Some___bool__bit_8___string_(
                    builder.create_Tuple3__bool__bit_8___string(false, (byte)-1, "")),
                builder.create_std_Some___bool__bit_8___string_(
                    builder.create_Tuple3__bool__bit_8___string(true, (byte)-2, "!")),
                builder.create_std_None___bool__bit_8___string_()
            };
            builder.insert_YI(Arrays.asList(v));
        }
        builder.insert_ZI0("Hello, world!");
        builder.insert_ZI0("Привіт!");
        builder.insert_ZI1(true);
        builder.insert_ZI1(false);
        builder.insert_ZI2((long)0);
        builder.insert_ZI2((long)1000);
        builder.insert_ZI3_A("It's all Greek to me:  Α α, Β β, Γ γ, Δ δ, Ε ε, Ζ ζ, Η η, Θ θ, Ι ι, Κ κ, Λ λ, Μ μ, Ν ν, Ξ ξ, Ο ο, Π π, Ρ ρ, Σ σ/ς, Τ τ, Υ υ, Φ φ, Χ χ, Ψ ψ, Ω ω.");
        {
            ArrayList<String> strings = new ArrayList<String>();
            strings.add("Foo\n");
            strings.add("\tbar");
            builder.insert_ZI4(strings);
        }
        {
            Map<String, ManyWriter> map = new HashMap<String, ManyWriter>();
            map.put("key1", builder.create_B(false));
            map.put("key2", builder.create_A("val2"));
            builder.insert_ZI5(map);
        }
        builder.insert_ZI6_std_Some("ZI6");
        builder.insert_ZI6_std_None();
        builder.insert_ZI7("♛");
        builder.insert_ZI7("ZI7");
        builder.insert_ZI8(100);
        builder.insert_ZI9(100);
        builder.insert_ZI10("Ref<IString>");
        {
            Map<ManyWriter, String> map = new HashMap<ManyWriter, String>();
            //map.put(builder.create_B(false), "v1");
            // Cannot add more than one record, since the map is printed in
            // non-deterministic order, so the diff fails.
            map.put(builder.create_A("val2"), "v2");
            builder.insert_ZI11(map);
        }
        {
            ArrayList<BigInteger> ints = new ArrayList<BigInteger>();
            ints.add(BigInteger.valueOf(0));
            ints.add(BigInteger.valueOf(0));
            ints.add(BigInteger.valueOf(1));
            builder.insert_ZI12(
                    "ZI12",
                    BigInteger.valueOf(1000000),
                    ints,
                    builder.create_Tuple2__bit_16___Many(0x10,
                        builder.create_D(builder.create_Tuple3__bool__bit_8___string(false, (byte)2, "string"))));
        }
        {
            ArrayList<BigInteger> ints = new ArrayList<BigInteger>();
            ints.add(BigInteger.valueOf(0));
            ints.add(BigInteger.valueOf(0));
            ints.add(BigInteger.valueOf(1));
            builder.insert_ZI13("ZI13", builder.create_Tuple3__bool__bit_8___string(false, (byte)2, "string"),
                    builder.create_A("ZI13"));
        }
        {
            BigInteger b = new BigInteger("01234566788901239813761283");
            builder.insert_ZI(b);
        }
        {
            Cases__string__signed_32_Writer w1 = builder.create_First__string__signed_32_("string");
            Cases__string__signed_32_Writer w2 = builder.create_Second__string__signed_32_(5);
            builder.insert_ZI14(w1);
            builder.insert_ZI14(w2);
        }
        {
            F__stringWriter f = builder.create_F__string("Or_string");
            Or__string__signed_32_Writer w1 = builder.create_OrFirst__string__signed_32_(f);
            S__signed_32_Writer s = builder.create_S__signed_32_(22);
            Or__string__signed_32_Writer w2 = builder.create_OrSecond__string__signed_32_(s);
            builder.insert_ZI15(w1);
            builder.insert_ZI15(w2);
        }
        {
            builder.insert_module_ZI16("zi16");
        }
        {
            builder.insert_module_ZI17("zi17");
        }
        {
            Tuple2__bit_32___stringWriter b = builder.create_Tuple2__bit_32___string(-1, "ZZZ");
            builder.insert_module_ZI18(b);
        }
        {
            builder.insert_module_ZI19(-3, "zi19");
        }
        {
            Tuple2__bit_32___stringWriter b = builder.create_Tuple2__bit_32___string(-2, "YYY");
            builder.insert_ZI20(b);
        }
        builder.insert_ZI21(13);
        builder.applyUpdates(this.api);
        try {
            builder.applyUpdates(this.api);
            assert false: "Reusing UpdateBuilder should throw an exception.";
        } catch (IllegalStateException e) {}
    }

    void clear() throws DDlogException {
        this.api.clearRelation(flatbufTestRelation.BI);
        this.api.clearRelation(flatbufTestRelation.CI);
        this.api.clearRelation(flatbufTestRelation.DI);
        this.api.clearRelation(flatbufTestRelation.EI);
        this.api.clearRelation(flatbufTestRelation.FI);
        this.api.clearRelation(flatbufTestRelation.GI);
        this.api.clearRelation(flatbufTestRelation.HI);
        this.api.clearRelation(flatbufTestRelation.II);
        this.api.clearRelation(flatbufTestRelation.JI);
        this.api.clearRelation(flatbufTestRelation.KI);
        this.api.clearRelation(flatbufTestRelation.LI);
        this.api.clearRelation(flatbufTestRelation.L0I);
        this.api.clearRelation(flatbufTestRelation.MI);
        this.api.clearRelation(flatbufTestRelation.NI);
        this.api.clearRelation(flatbufTestRelation.OI);
        this.api.clearRelation(flatbufTestRelation.PI1);
        this.api.clearRelation(flatbufTestRelation.PI2);
        this.api.clearRelation(flatbufTestRelation.PI3);
        this.api.clearRelation(flatbufTestRelation.PI4);
        this.api.clearRelation(flatbufTestRelation.PI5);
        this.api.clearRelation(flatbufTestRelation.QI);
        this.api.clearRelation(flatbufTestRelation.RI);
        this.api.clearRelation(flatbufTestRelation.SI);
        this.api.clearRelation(flatbufTestRelation.TI);
        this.api.clearRelation(flatbufTestRelation.UI);
        this.api.clearRelation(flatbufTestRelation.VI);
        this.api.clearRelation(flatbufTestRelation.WI);
        this.api.clearRelation(flatbufTestRelation.XI);
        this.api.clearRelation(flatbufTestRelation.YI);
        this.api.clearRelation(flatbufTestRelation.ZI0);
        this.api.clearRelation(flatbufTestRelation.ZI1);
        this.api.clearRelation(flatbufTestRelation.ZI2);
        this.api.clearRelation(flatbufTestRelation.ZI3);
        this.api.clearRelation(flatbufTestRelation.ZI4);
        this.api.clearRelation(flatbufTestRelation.ZI5);
        this.api.clearRelation(flatbufTestRelation.ZI6);
        this.api.clearRelation(flatbufTestRelation.ZI7);
        this.api.clearRelation(flatbufTestRelation.ZI8);
        this.api.clearRelation(flatbufTestRelation.ZI9);
        this.api.clearRelation(flatbufTestRelation.ZI10);
        this.api.clearRelation(flatbufTestRelation.ZI11);
        this.api.clearRelation(flatbufTestRelation.ZI12);
        this.api.clearRelation(flatbufTestRelation.ZI13);
        this.api.clearRelation(flatbufTestRelation.ZI);
        this.api.clearRelation(flatbufTestRelation.ZI14);
        this.api.clearRelation(flatbufTestRelation.ZI15);
        this.api.clearRelation(flatbufTestRelation.module_ZI16);
        this.api.clearRelation(flatbufTestRelation.module_ZI17);
        this.api.clearRelation(flatbufTestRelation.module_ZI18);
        this.api.clearRelation(flatbufTestRelation.module_ZI19);
        this.api.clearRelation(flatbufTestRelation.ZI20);
        this.api.clearRelation(flatbufTestRelation.ZI21);
    }

    void run() throws IOException, DDlogException {
        /* DDlogRecord-based coommit */
        this.api.transactionStart();
        this.update();
        this.api.transactionCommitDumpChanges(r -> {
            try {
                this.onRecCommit(r);
            } catch (IOException e) {
                throw new UncheckedIOException(e);
            }
        });
        this.rec_file.close();

        /* Clear all input relations */
        this.api.transactionStart();
        this.clear();
        this.api.transactionCommit();

        /* FlatBuffers-based coommit */
        this.api.transactionStart();
        this.update();
        flatbufTestUpdateParser.transactionCommitDumpChanges(this.api, r -> {
            try {
                this.onFBCommit(r);
            } catch (IOException e) {
                throw new UncheckedIOException(e);
            }
        });

        /* Test queries */
        query_file.println("Query CI_by_c[0]:");
        flatbufTestQuery.queryCI_by_c(this.api, 0, v -> {
            query_file.println("CI{" + v.c() + "}");
        });

        query_file.println("Query CI_by_c[8]:");
        flatbufTestQuery.queryCI_by_c(this.api, 8, v -> {
            query_file.println("CI{" + v.c() + "}");
        });

        query_file.println("Query DI_by_d[0]:");
        flatbufTestQuery.queryDI_by_d(this.api, (short)0, v -> {
            query_file.println("DI{" + v.d() + "}");
        });
        query_file.println("Query DI_by_d[1000]:");
        flatbufTestQuery.queryDI_by_d(this.api, (short)1000, v -> {
            query_file.println("DI{" + v.d() + "}");
        });
        query_file.println("Query DI_by_none[]:");
        flatbufTestQuery.queryDI_by_none(this.api, v -> {
            query_file.println("DI{" + v.d() + "}");
        });

        query_file.println("Query EI_by_e[-1]:");
        flatbufTestQuery.queryEI_by_e(this.api, BigInteger.ZERO.subtract(BigInteger.ONE), v -> {
            query_file.println("EI{" + v.e() + "}");
        });
        query_file.println("Query EO_by_e[-1]:");
        flatbufTestQuery.queryEO_by_e(this.api, BigInteger.ZERO.subtract(BigInteger.ONE), v -> {
            query_file.println("EO{" + v.e() + "}");
        });

        query_file.println("Query FI_by_s[\"α,\"]:");
        flatbufTestQuery.queryFI_by_s(this.api, "α", v -> {
            query_file.println("FI{\"" + v.s() + "\"}");
        });
        query_file.println("Query FI_by_s[\"string\"]:");
        flatbufTestQuery.queryFI_by_s(this.api, "string", v -> {
            query_file.println("FI{\"" + v.s() + "\"}");
        });

        query_file.println("Query GI_by_d[-100]:");
        flatbufTestQuery.queryGI_by_d(this.api, (long)-100, v -> {
            query_file.println("GI{" + v.d() + "}");
        });
        query_file.println("Query GI_by_d[100]:");
        flatbufTestQuery.queryGI_by_d(this.api, (long)100, v -> {
            query_file.println("GI{" + v.d() + "}");
        });

        query_file.println("Query HI_by_d[0ABACABA0ABACABA]:");
        flatbufTestQuery.queryHI_by_d(this.api, new BigInteger("0ABACABA0ABACABA", 16), v -> {
            query_file.println("HI{" + v.d() + "}");
        });

        query_file.println("Query II_by_d[7]:");
        flatbufTestQuery.queryII_by_d(this.api, 7, v -> {
            query_file.println("II{" + v.d() + "}");
        });

        query_file.println("Query JI_by_0[true]:");
        flatbufTestQuery.queryJI_by_0(this.api, true, v -> {
            query_file.println("JI{" + printTuple(v.a()) + "}");
        });
        query_file.println("Query JI_by_1[10]:");
        flatbufTestQuery.queryJI_by_1(this.api, 10, v -> {
            query_file.println("JI{" + printTuple(v.a()) + "}");
        });
        query_file.println("Query JI_by_2[\"string\"]:");
        flatbufTestQuery.queryJI_by_2(this.api, "string", v -> {
            query_file.println("JI{" + printTuple(v.a()) + "}");
        });
        query_file.println("Query JI_by_01[true, 10]:");
        flatbufTestQuery.queryJI_by_01(this.api, true, 10, v -> {
            query_file.println("JI{" + printTuple(v.a()) + "}");
        });
        query_file.println("Query JI_by_01[false, 10]:");
        flatbufTestQuery.queryJI_by_01(this.api, false, 10, v -> {
            query_file.println("JI{" + printTuple(v.a()) + "}");
        });
        query_file.println("Query JI_by_02[true, \"string\"]:");
        flatbufTestQuery.queryJI_by_02(this.api, true, "string", v -> {
            query_file.println("JI{" + printTuple(v.a()) + "}");
        });
        query_file.println("Query JI_by_12[10, \"string\"]:");
        flatbufTestQuery.queryJI_by_12(this.api, 10, "string", v -> {
            query_file.println("JI{" + printTuple(v.a()) + "}");
        });
        query_file.println("Query JI_by_012[true, 10, \"string\"]:");
        flatbufTestQuery.queryJI_by_012(this.api, true, 10, "string", v -> {
            query_file.println("JI{" + printTuple(v.a()) + "}");
        });
        query_file.println("Query JI_by_all[true, 10, \"string\"]:");
        flatbufTestQuery.queryJI_by_all(this.api,
                bldr -> {
                    return bldr.create_Tuple3__bool__bit_8___string(true, (byte)10, "string");
                },
                v -> {
                    query_file.println("JI{" + printTuple(v.a()) + "}");
                });
        query_file.println("Query JI_by_self[true, 10, \"string\"]:");
        flatbufTestQuery.queryJI_by_self(this.api,
                bldr -> {
                    return bldr.create_JI(bldr.create_Tuple3__bool__bit_8___string(true, (byte)10, "string"));
                },
                v -> {
                    query_file.println("JI{" + printTuple(v.a()) + "}");
                });
        query_file.println("Query JI_by_10[10, true]:");
        flatbufTestQuery.queryJI_by_10(this.api, 10, true, v -> {
            query_file.println("JI{" + printTuple(v.a()) + "}");
        });

        query_file.println("Query KI_by_01[false, 9]:");
        flatbufTestQuery.queryKI_by_01(this.api, false, 9, v -> {
            query_file.println("KI{" + printTuple(v.t()) + "}");
        });
        query_file.println("Query KI_by_all[false, 9, \"text\"]:");
        flatbufTestQuery.queryKI_by_all(this.api,
                bldr -> {
                    return bldr.create_Tuple3__bool__bit_8___string(false, (byte)9, "text");
                },
                v -> {
                    query_file.println("KI{" + printTuple(v.t()) + "}");
                });

        query_file.println("Query LI_by_01[true, -1]:");
        flatbufTestQuery.queryLI_by_01(this.api, true, -1, v -> {
            query_file.println(printTuple((Tuple3__bool__bit_8___stringReader)v));

        });
        query_file.println("Query LI_by_all[true, -1, \"something\"]:");
        flatbufTestQuery.queryLI_by_all(this.api,
                bldr -> {
                    return bldr.create_Tuple3__bool__bit_8___string(true, (byte)-1, "something");
                },
                v -> {
                    query_file.println(printTuple((Tuple3__bool__bit_8___stringReader)v));
                });

        query_file.println("Query L0I[true]:");
        flatbufTestQuery.queryL0I_by_a(this.api, true, v -> {
            query_file.println("L0I{" + v.a() + "," + v.b() + ",\"" + v.s() + "\"}");
        });
        query_file.println("Query L0I[false]:");
        flatbufTestQuery.queryL0I_by_a(this.api, false, v -> {
            query_file.println("L0I{" + v.a() + "," + v.b() + ",\"" + v.s() + "\"}");
        });

        query_file.println("Query MI_by_v[true, false, true]:");
        flatbufTestQuery.queryMI_by_v(this.api, Arrays.asList(new Boolean[] {true, false, true}), v -> {
            query_file.println("MI{" + v.v() + "}");
        });

        query_file.println("Query NI_by_v[(true,-1,\"check\"), (false,1,\"fails\")]:");
        flatbufTestQuery.queryNI_by_v(this.api, 
                bldr -> {
                    ArrayList<Tuple3__bool__bit_8___stringWriter> vec = new ArrayList<Tuple3__bool__bit_8___stringWriter>(2);
                    vec.add(bldr.create_Tuple3__bool__bit_8___string(true, (byte)-1, "check"));
                    vec.add(bldr.create_Tuple3__bool__bit_8___string(false, (byte)1, "fails"));
                    return vec;
                },
                v -> {
                    query_file.println(printNI(v));
                });

        query_file.println("Query OI_by_v[[false,false],[true, true]]:");
        List<Boolean> l1 = Arrays.asList(new Boolean[] {false, false});
        List<Boolean> l2 = Arrays.asList(new Boolean[] {true, true});
        List<List<Boolean>> nest = new ArrayList<List<Boolean>>(2);
        nest.add(l1);
        nest.add(l2);
        flatbufTestQuery.queryOI_by_v(this.api, nest,
                v -> {
                    query_file.println("OI{" + v.v() + "}");
                });

        query_file.println("Query PI1_by_s[-2, 3, 2, 3]:");
        flatbufTestQuery.queryPI1_by_s(this.api, Arrays.asList(new Byte[]{ -2, 3, 2, 3 }), v -> {
            query_file.println("PI1{" + v.s() + "}");
        });

        query_file.println("Query PI2_by_s[10000, 3, -2, 3]:");
        flatbufTestQuery.queryPI2_by_s(this.api, Arrays.asList(new Short[]{ 10000, 3, -2, 3 }), v -> {
            query_file.println("PI2{" + v.s() + "}");
        });

        query_file.println("Query PI3_by_s[0xffffffff, 3, -2, 3]:");
        flatbufTestQuery.queryPI3_by_s(this.api, Arrays.asList(new Integer[]{ 0xffffffff, 3, -2, 3 }), v -> {
            query_file.println("PI3{" + v.s() + "}");
        });

        query_file.println("Query PI4_by_s[2, 3, 2, 3]:");
        flatbufTestQuery.queryPI4_by_s(this.api, Arrays.asList(new Long[]{ 2L, 3L, 2L, 3L }), v -> {
            query_file.println("PI4{" + v.s() + "}");
        });
        query_file.println("Query PI4_by_none[]:");
        flatbufTestQuery.queryPI4_by_none(this.api, v -> {
            query_file.println("PI4{" + v.s() + "}");
        });
        query_file.println("Query PI4_by_self[2, 3, 2, 3]:");
        flatbufTestQuery.queryPI4_by_self(this.api,
                bldr -> {
                    return bldr.create_PI4(Arrays.asList(new Long[]{ 2L, 3L, 2L, 3L }));
                },
                v -> {
                    query_file.println("PI4{" + v.s() + "}");
                });

        query_file.println("Query PI5_by_s[0xffffffffffffff, 3, 2, 3]:");
        List<BigInteger> pi = Arrays.asList(new BigInteger[]{
            BigInteger.valueOf(0xffffffffffffffL),
            BigInteger.valueOf(3),
            BigInteger.valueOf(2),
            BigInteger.valueOf(3)
        });
        flatbufTestQuery.queryPI5_by_s(this.api, pi, v -> {
            query_file.println("PI5{" + v.s() + "}");
        });

        query_file.println("Query QI_by_m[(2=>\"here\", 3=>\"there\"]:");
        {
            Map<Long, String> map = new HashMap<Long, String>();
            map.put(Long.valueOf(2), "here");
            map.put(Long.valueOf(3), "there");
            flatbufTestQuery.queryQI_by_m(this.api, map, v -> {
                query_file.println(printQI(v));
            });
        }

        query_file.println("Query RI_by_refm[2]:");
        flatbufTestQuery.queryRI_by_refm(this.api, 2, v -> {
            query_file.println("RI{" + v.m() + "}");
        });
        query_file.println("Query RI_by_m[2]:");
        flatbufTestQuery.queryRI_by_m(this.api, 2, v -> {
            query_file.println("RI{" + v.m() + "}");
        });

        query_file.println("Query SI_by_m[\"s\"]:");
        flatbufTestQuery.querySI_by_m(this.api,
                bldr -> {
                    return bldr.create_C("s");
                },
                v -> {
                    query_file.println("SI{C{\"" + v.m().x() + "\"}}");
                });
        query_file.println("Query SI_by_x[\"s\"]:");
        flatbufTestQuery.querySI_by_x(this.api, "s",
                v -> {
                    query_file.println("SI{C{\"" + v.m().x() + "\"}}");
                });

        query_file.println("Query TI_by_m[10]:");
        flatbufTestQuery.queryTI_by_m(this.api,
                bldr -> {
                    return bldr.create_std_Some__bit_32_(10);
                },
                v -> {
                    query_file.println(printTI(v));
                });
        query_file.println("Query TI_by_some[10]:");
        flatbufTestQuery.queryTI_by_some(this.api, 10, v -> {
                    query_file.println(printTI(v));
                });
        query_file.println("Query TI_by_none[]:");
        flatbufTestQuery.queryTI_by_none(this.api, v -> {
                    query_file.println(printTI(v));
                });

        query_file.println("Query UI_by_x[\"a\"]:");
        flatbufTestQuery.queryUI_by_x(this.api, "a",
                v -> { query_file.println(printMany(v)); });
        query_file.println("Query UI_by_b[false]:");
        flatbufTestQuery.queryUI_by_b(this.api, false,
                v -> { query_file.println(printMany(v)); });
        query_file.println("Query UI_by_t[(false, 2, \"zz\")]:");
        flatbufTestQuery.queryUI_by_t(this.api,
                bldr -> {
                    return bldr.create_Tuple3__bool__bit_8___string(false, (byte)2, "zz");
                },
                v -> { query_file.println(printMany(v)); });
        query_file.println("Query UI_by_t1[2]:");
        flatbufTestQuery.queryUI_by_t1(this.api, 2,
                v -> { query_file.println(printMany(v)); });

        query_file.println("Query VI_by_a[false]:");
        flatbufTestQuery.queryVI_by_a(this.api, false,
                v -> {
                    query_file.println("VI{" + v.a() + "," + printMany(v.b()) + "}");
                });
        query_file.println("Query VI_by_t1[2]:");
        flatbufTestQuery.queryVI_by_t1(this.api, 2,
                v -> {
                    query_file.println("VI{" + v.a() + "," + printMany(v.b()) + "}");
                });

        query_file.println("Query WI_by_t2[\"foo\"]:");
        flatbufTestQuery.queryWI_by_t2(this.api, "foo",
                v -> { query_file.println(printWI(v)); });
        query_file.println("Query WI_by_t[(false, 2, \"string\")]:");
        flatbufTestQuery.queryWI_by_t(this.api,
                bldr -> {
                    return bldr.create_Tuple3__bool__bit_8___string(false, (byte)2, "string");
                },
                v -> { query_file.println(printWI(v)); });

        query_file.println("Query XI_by_m[A{\"aa\"}, B{false}, D{(false,2,\"string\")}]:");
        flatbufTestQuery.queryXI_by_m(this.api,
                bldr -> {
                    ManyWriter[] m = {
                        bldr.create_A("aa"),
                        bldr.create_B(false),
                        bldr.create_D(bldr.create_Tuple3__bool__bit_8___string(false, (byte)2, "string"))
                    };
                    return Arrays.asList(m);
                },
                v -> { query_file.println(printXI(v)); });

        query_file.println("Query YI_by_v[...]:");
        flatbufTestQuery.queryYI_by_v(this.api,
                bldr -> {
                    std_Option___bool__bit_8___string_Writer[] v = {
                        bldr.create_std_Some___bool__bit_8___string_(
                                bldr.create_Tuple3__bool__bit_8___string(false, (byte)-1, "")),
                        bldr.create_std_Some___bool__bit_8___string_(
                                bldr.create_Tuple3__bool__bit_8___string(true, (byte)-2, "!")),
                        bldr.create_std_None___bool__bit_8___string_()
                    };
                    return Arrays.asList(v);
                },
                v -> { query_file.println(printYI(v)); });
        query_file.println("Query YI_by_none[]:");
        flatbufTestQuery.queryYI_by_none(this.api,
                v -> { query_file.println(printYI(v)); });
        query_file.println("Query YI_by_self[...]:");
        flatbufTestQuery.queryYI_by_self(this.api,
                bldr -> {
                    std_Option___bool__bit_8___string_Writer[] v = {
                        bldr.create_std_Some___bool__bit_8___string_(
                                bldr.create_Tuple3__bool__bit_8___string(false, (byte)-1, "")),
                        bldr.create_std_Some___bool__bit_8___string_(
                                bldr.create_Tuple3__bool__bit_8___string(true, (byte)-2, "!")),
                        bldr.create_std_None___bool__bit_8___string_()
                    };
                    return bldr.create_YI(Arrays.asList(v));
                },
                v -> { query_file.println(printYI(v)); });

        query_file.println("Query ZI_by_d[0]:");
        flatbufTestQuery.queryZI_by_d(this.api, BigInteger.valueOf(0),
                v -> { query_file.println("HI{" + v.d() + "}"); });

        query_file.println("Query ZI0_by_self[\"Привіт!\"]:");
        flatbufTestQuery.queryZI0_by_self(this.api, "Привіт!",
                v -> { query_file.println("\"" + v + "\""); });

        query_file.println("Query ZI1_by_self[false]:");
        flatbufTestQuery.queryZI1_by_self(this.api, false,
                v -> { query_file.println(v); });
        query_file.println("Query ZI1_by_true[]:");
        flatbufTestQuery.queryZI1_by_true(this.api,
                v -> { query_file.println(v); });

        query_file.println("Query ZI2_by_self[1000]:");
        flatbufTestQuery.queryZI2_by_self(this.api, 1000,
                v -> { query_file.println(v); });
        query_file.println("Query ZI2_by_const[]:");
        flatbufTestQuery.queryZI2_by_const(this.api,
                v -> { query_file.println(v); });

        query_file.println("Query ZI3_by_self[...]:");
        flatbufTestQuery.queryZI3_by_self(this.api,
                bldr -> {
                    return bldr.create_A("It's all Greek to me:  Α α, Β β, Γ γ, Δ δ, Ε ε, Ζ ζ, Η η, Θ θ, Ι ι, Κ κ, Λ λ, Μ μ, Ν ν, Ξ ξ, Ο ο, Π π, Ρ ρ, Σ σ/ς, Τ τ, Υ υ, Φ φ, Χ χ, Ψ ψ, Ω ω.");
                },
                v -> { query_file.println(printMany(v)); });
        query_file.println("Query ZI3_by_const[]:");
        flatbufTestQuery.queryZI3_by_const(this.api,
                v -> { query_file.println(printMany(v)); });

        query_file.println("Query ZI4_by_self[...]:");
        {
            ArrayList<String> strings = new ArrayList<String>();
            strings.add("Foo\n");
            strings.add("\tbar");
            flatbufTestQuery.queryZI4_by_self(this.api, strings,
                    v -> { query_file.println(printStrings(v)); });
        }

        query_file.println("Query ZI5_by_self[...]:");
        flatbufTestQuery.queryZI5_by_self(this.api,
                bldr -> {
                    Map<String, ManyWriter> map = new HashMap<String, ManyWriter>();
                    map.put("key1", bldr.create_B(false));
                    map.put("key2", bldr.create_A("val2"));
                    return map;
                },
                v -> { query_file.println(printZI5(v)); });

        query_file.println("Query ZI6_by_self[\"ZI6\"]:");
        flatbufTestQuery.queryZI6_by_self(this.api,
                bldr -> {
                    return bldr.create_std_Some__string("ZI6");
                },
                v -> { query_file.println(printOptString(v)); });
        query_file.println("Query ZI6_by_none[]:");
        flatbufTestQuery.queryZI6_by_none(this.api,
                v -> { query_file.println(printOptString(v)); });

        query_file.println("Query ZI7_by_self[\"♛\"]:");
        flatbufTestQuery.queryZI7_by_self(this.api, "♛",
                v -> { query_file.println("\"" + v + "\""); });
        query_file.println("Query ZI7_by_val[\"ZI7\"]:");
        flatbufTestQuery.queryZI7_by_val(this.api, "ZI7",
                v -> { query_file.println("\"" + v + "\""); });

        query_file.println("Query ZI8_by_self[100]:");
        flatbufTestQuery.queryZI8_by_self(this.api, 100,
                v -> { query_file.println(v); });

        query_file.println("Query ZI9_by_self[100]:");
        flatbufTestQuery.queryZI9_by_self(this.api, 100,
                v -> { query_file.println(v); });
        query_file.println("Query ZI9_by_refval[100]:");
        flatbufTestQuery.queryZI9_by_refval(this.api, 100,
                v -> { query_file.println(v); });
        query_file.println("Query ZI9_by_val[100]:");
        flatbufTestQuery.queryZI9_by_val(this.api, 100,
                v -> { query_file.println(v); });
        query_file.println("Query ZI9_by_const[]:");
        flatbufTestQuery.queryZI9_by_const(this.api,
                v -> { query_file.println(v); });

        query_file.println("Query ZI10_by_self[\"Ref<IString>\"]:");
        flatbufTestQuery.queryZI10_by_self(this.api, "Ref<IString>",
                v -> { query_file.println("\"" + v + "\""); });

        query_file.println("Query ZI11_by_self[\"val2\"=>\"v2\"]:");
        flatbufTestQuery.queryZI11_by_self(this.api,
                bldr -> {
                    Map<ManyWriter, String> map = new HashMap<ManyWriter, String>();
                    map.put(bldr.create_A("val2"), "v2");
                    return map;
                },
                v -> { query_file.println(printZI11(v)); });

        query_file.println("Query ZI12_by_self[..]:");
        flatbufTestQuery.queryZI12_by_self(this.api,
                bldr -> {
                    ArrayList<BigInteger> ints = new ArrayList<BigInteger>();
                    ints.add(BigInteger.valueOf(0));
                    ints.add(BigInteger.valueOf(0));
                    ints.add(BigInteger.valueOf(1));
                    return bldr.create_Tuple4__string__bigint__std_Vec_bigint____bit_16___Many_(
                            "ZI12",
                            BigInteger.valueOf(1000000),
                            ints,
                            bldr.create_Tuple2__bit_16___Many(0x10,
                                bldr.create_D(bldr.create_Tuple3__bool__bit_8___string(false, (byte)2, "string"))));
                },
                v -> { query_file.println(printZI12(v)); });
        query_file.println("Query ZI12_by_0[\"ZI12\"]:");
        flatbufTestQuery.queryZI12_by_0(this.api, "ZI12",
                v -> { query_file.println(printZI12(v)); });
        query_file.println("Query ZI12_by_1[1000000]:");
        flatbufTestQuery.queryZI12_by_1(this.api, BigInteger.valueOf(1000000),
                v -> { query_file.println(printZI12(v)); });
        query_file.println("Query ZI12_by_2[0,0,1]:");
        {
            ArrayList<BigInteger> ints = new ArrayList<BigInteger>();
            ints.add(BigInteger.valueOf(0));
            ints.add(BigInteger.valueOf(0));
            ints.add(BigInteger.valueOf(1));
            flatbufTestQuery.queryZI12_by_2(this.api, ints,
                    v -> { query_file.println(printZI12(v)); });
        }
        query_file.println("Query ZI12_by_3[...]:");
        flatbufTestQuery.queryZI12_by_3(this.api,
                bldr -> {
                    return bldr.create_Tuple2__bit_16___Many(0x10,
                            bldr.create_D(bldr.create_Tuple3__bool__bit_8___string(false, (byte)2, "string")));
                },
                v -> { query_file.println(printZI12(v)); });
        query_file.println("Query ZI12_by_30[0x10]:");
        flatbufTestQuery.queryZI12_by_30(this.api, 0x10,
                v -> { query_file.println(printZI12(v)); });
        query_file.println("Query ZI12_by_31[...]:");
        flatbufTestQuery.queryZI12_by_31(this.api,
                bldr -> {
                    return bldr.create_D(bldr.create_Tuple3__bool__bit_8___string(false, (byte)2, "string"));
                },
                v -> { query_file.println(printZI12(v)); });

        query_file.println("Query ZI13_by_f0[...]:");
        flatbufTestQuery.queryZI13_by_f0(this.api, "ZI13",
                v -> { query_file.println(printZI13(v)); });
        query_file.println("Query ZI13_by_f1[...]:");
        flatbufTestQuery.queryZI13_by_f1(this.api,
                bldr -> {
                    return bldr.create_Tuple3__bool__bit_8___string(false, (byte)2, "string");
                },
                v -> { query_file.println(printZI13(v)); });
        query_file.println("Query ZI13_by_f2[...]:");
        flatbufTestQuery.queryZI13_by_f2(this.api,
                bldr -> {
                    return bldr.create_A("ZI13");
                },
                v -> { query_file.println(printZI13(v)); });
        query_file.println("Query ZI13_by_t2[...]:");
        flatbufTestQuery.queryZI13_by_t2(this.api, "ZI13",
                v -> { query_file.println(printZI13(v)); });

        query_file.println("Query ZI14_by_self[...]:");
        flatbufTestQuery.queryZI14_by_self(this.api,
                bldr -> {
                    return bldr.create_First__string__signed_32_("string");
                },
                v -> { query_file.println(printCases("ZI14", v.c())); });
        query_file.println("Query ZI14_by_a[\"string\"]:");
        flatbufTestQuery.queryZI14_by_a(this.api, "string",
                v -> { query_file.println(printCases("ZI14", v.c())); });
        query_file.println("Query ZI14_by_b[5]:");
        flatbufTestQuery.queryZI14_by_b(this.api, 5,
                v -> { query_file.println(printCases("ZI14", v.c())); });

        query_file.println("Query ZI15_by_a[\"Or_string\"]:");
        flatbufTestQuery.queryZI15_by_a(this.api, "Or_string",
                v -> { query_file.println(printOr("ZI15", v.c())); });

        query_file.println("Query module_ZI16_by_x[\"zi16\"]:");
        flatbufTestQuery.querymodule_ZI16_by_x(this.api, "zi16",
                v -> { query_file.println("module_ZI16{\"" + v.x() + "\"}"); });

        query_file.println("Query module_ZI18_by_0[-1]:");
        flatbufTestQuery.queryZI18_by_0(this.api, -1,
                v -> { query_file.println("module_ZI18{" + printMTuple(v.t()) + "}"); });

        query_file.println("Query module_ZI19_by_1[\"zi19\"]:");
        flatbufTestQuery.querymodule_ZI19_by_1(this.api, "zi19",
                v -> { query_file.println(printMTuple(v)); });

        query_file.println("Query ZI20_by_0[-2]:");
        flatbufTestQuery.queryZI20_by_0(this.api, -2,
                v -> { query_file.println("ZI20{" + printMTuple(v.t()) + "}"); });

        query_file.println("Query ZI21_by_m[13]:");
        flatbufTestQuery.queryZI21_by_m(this.api, 13,
                v -> { query_file.println("ZI21{" + v.m() + "}"); });

        this.fb_file.close();
        this.query_file.close();
    }

    public static void main(String[] args) throws IOException, DDlogException {
        Test test = new Test();
        test.run();
    }
}
