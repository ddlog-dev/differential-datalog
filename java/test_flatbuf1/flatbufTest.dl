import intern

input relation BI(b: bool)
index BI_by_b(b: bool) on BI(b)

input relation CI(c: bit<32>)
index CI_by_c(c: bit<32>) on CI(c)

input relation DI(d: signed<16>)
index DI_by_d(d: signed<16>) on DI(d)
index DI_by_none() on DI()

input relation EI(e: bigint)
index EI_by_e(e: bigint) on EI(e)

output relation EO(e: bigint)
index EO_by_e(e: bigint) on EO(e)

input relation FI(s: string)
index FI_by_s(s: string) on FI(s)

input relation GI(d: bit<64>)
index GI_by_d(d: bit<64>) on GI(d)

input relation HI(d: bit<128>)
index HI_by_d(d: bit<128>) on HI(d)

input relation II(d: bit<12>)
index II_by_d(d: bit<12>) on II(d)

typedef tuple = (bool, bit<8>, string)
input relation JI(a: (bool, bit<8>, string))
index JI_by_0(x: bool) on JI((x,_,_))
index JI_by_1(x: bit<8>) on JI((_,x,_))
index JI_by_2(x: string) on JI((_,_,x))
index JI_by_01(x: bool, y: bit<8>) on JI((x,y,_))
index JI_by_02(x: bool, y: string) on JI((x,_,y))
index JI_by_12(x: bit<8>, y: string) on JI((_,x,y))
index JI_by_012(x: bool, y: bit<8>, z: string) on JI((x,y,z))
index JI_by_all(x: tuple) on JI(x)
index JI_by_self(x: JI) on JI[x]
index JI_by_10(y: bit<8>, x: bool) on JI((x,y,_))

input relation KI(t: tuple)
input relation LI[tuple]
input relation L0I(a: bool, b: bit<8>, s: string) primary key (x) x.a
index L0I_by_a(a: bool) on L0I(.a = a)
input relation MI(v: Vec<bool>)
input relation NI(v: Vec<tuple>)
input relation OI(v: Vec<Vec<bool>>)
input relation PI1(s: Set<bit<8>>)
input relation PI2(s: Set<bit<16>>)
input relation PI3(s: Set<bit<32>>)
input relation PI4(s: Set<bit<64>>)
input relation PI5(s: Set<bit<128>>)
input relation QI(m: Map<bit<32>, string>)
input relation RI(m: Ref<bit<32>>)
typedef C = C{x: string}
input relation SI(m: C)
input relation TI(m: Option<bit<32>>)
typedef Many = A{x: string}
             | B{b: bool}
             | D{t: tuple}
input relation UI[Many]
input relation VI(a: bool, b: Many)
input relation WI(m: Option<Many>)
input relation XI(m: Vec<Many>)
typedef VOT = Vec<Option<tuple>>
input relation YI(v: VOT)
input relation ZI(d: bit<256>)
input relation ZI0[string]
input relation ZI1[bool]
input relation ZI2[bit<32>]
input relation ZI3[Many]
input relation ZI4[Vec<string>]
input relation ZI5[Map<string, Many>]
input relation ZI6[Option<string>]
input relation ZI7[Ref<string>]
input relation ZI8[Ref<bit<25>>]
input relation ZI9[Ref<Ref<bit<25>>>]
input relation ZI10[Ref<IString>]
input relation ZI11[Map<Many, string>]
input relation ZI12[(string, bigint, Vec<bigint>, (bit<16>, Many))]
typedef Generic<'A, 'B> = Generic{f0: string, f1: 'A, f2: 'B}
input relation ZI13[Generic<Ref<tuple>, Many>]
typedef Cases<'A, 'B> = First{a: 'A}
                      | Second{b: 'B}
input relation ZI14(c: Cases<string, signed<32>>)
typedef F<'A> = FirstF{a: 'A}
typedef S<'A> = SecondS{a: 'A}
typedef Or<'A, 'B> = OrFirst{f: F<'A>}
                   | OrSecond{s: S<'B>}
input relation ZI15(c: Or<string, signed<32>>)
import module
input relation ZI20(t: mtuple)
input relation ZI21(m: bit<32>) primary key (r) r.m
